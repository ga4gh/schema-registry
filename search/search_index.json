{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Schema registry specification","text":""},{"location":"#what-is-the-schema-registry-specification","title":"What is the schema registry specification?","text":"<p>The GA4GH Schema registry specification provides a standard for representing and sharing schemas. It can be implemented by independent provides, which can then interoperate to share schemas across domains.</p>"},{"location":"#can-i-see-a-demo","title":"Can I see a demo?","text":"<p>The specification itself is still under development.  Once the spec is developed, we anticipate independent implementations that conform to the specification will be available. These services can then be used to share schemas.</p>"},{"location":"#specification-version","title":"Specification version","text":"<p>This specification is in DRAFT form. This is NOT AN APPROVED GA4GH specification. </p>"},{"location":"#introduction","title":"Introduction","text":"<p>GA4GH Workstreams gather experts from a particular area of interest and develop standards, frameworks and tools.  Workstreams operate independently and often define different vocabulary and data representation (schema) standards. This presents challenges when bringing together products from different workstreams and hinders adoption of GA4GH products.</p> <p>A schema defines the structure used to store or exchange data. It is often an implementation of a data model either implicitly or explicitly but usually includes optimizations/restrictions that are not relevant to the data model. </p> <p>A GA4GH Schema Registry is an online location where the GA4GH community can find schemas that are in use within and/or recommended by the GA4GH community.</p> <p>The goal of the schema registry specification is to provide a standard for representation and exchange of schemas. </p>"},{"location":"#use-cases","title":"Use cases","text":"<p>To be added</p>"},{"location":"#definitions-of-key-terms","title":"Definitions of key terms","text":""},{"location":"#general-terms","title":"General terms","text":"<ul> <li>Namespace: The name of a user or organization that owns schemas. Analogous to a github user or organization name. The namespace forms part of the registry path for a schema.</li> <li>Schema: A document that defines the structure used to store or exchange data. It is often an implementation of a conceptual data model either implicitly or explicitly but usually includes optimizations/restrictions that are not relevant to the data model. </li> <li>Schema Registry: A resource on the web (URL) where a [GA4GH] community can find schemas that are in use within and/or recommended by the community.</li> <li>Semantic Version: A string like, <code>MAJOR.MINOR.PATCH</code> (e.g. <code>0.4.3</code>) that uses following the semantic versioning standard, used to version a schema.</li> <li>Registry path: A name used to identify a schema, consisting of the namespace and schema name, like <code>{namespace}/{schema_name}</code>. Analogous to a repository name on GitHub. Schema registry paths uniquely identify a particular schema within a given Schema Registry.</li> </ul>"},{"location":"contributing/","title":"Contributing","text":"<p>We welcome more participants! If you are interested in contributing, one of the best ways is to raise an issue using the GitHub issue tracker. Please feel free to reach out via e-mail, or join the biweekly GA4GH calls.</p>"},{"location":"contributing/#maintainers","title":"Maintainers","text":"<ul> <li>Kathy Reinold</li> <li>Nathan Sheffield, Department of Genome Sciences, University of Virginia</li> <li>Jonathan Fuerth, DNAstack</li> </ul>"},{"location":"contributing/#contributors","title":"Contributors","text":"<ul> <li>Mike Warfe</li> <li>Add your name here!</li> </ul>"},{"location":"contributing/#call-info","title":"Call info","text":"<p>The community calls are held via Zoom every other week. For information on schedule and Zoom links, please contact the GA4GH Secretariat.</p>"},{"location":"contributing/#ga4gh-info","title":"GA4GH info","text":"<p>The sequence collections team is a subgroup of TASC. You can find more about workstreams and find the public minutes of all previous meetings at GA4GH workstreams.</p>"},{"location":"decision_record/","title":"Architectural Decision Record","text":"<p>This is a record of decisions made during specification development. Each entry describes a decision that has been approved by the team members. Collectively, this ADR describes an institutional memory for decisions and their rationales, including known limitations. The goal is to avoid repeated discussion of previous decisions, formally acknowledge limitations, preserve and articulate reasons behind the decisions, and share this information with the broader community. </p> <p>The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\", \"SHALL NOT\", \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\",  \"MAY\", and \"OPTIONAL\" in this document are to be interpreted as described in RFC 2119.</p>"},{"location":"decision_record/#2025-04-15-pagination","title":"2025-04-15 Pagination","text":""},{"location":"decision_record/#category-pagination","title":"Category: Pagination","text":""},{"location":"decision_record/#decision","title":"Decision","text":"<p>Include pagination for all endpoints that return a list. </p>"},{"location":"decision_record/#rationale","title":"Rationale","text":"<p>Follows GA4GH standard; good form because it allows the user to see the total of results without having to page through to the end. </p>"},{"location":"decision_record/#linked-issues","title":"Linked issues","text":"<ul> <li>https://github.com/ga4gh/schema-registry/issues/11</li> </ul>"},{"location":"decision_record/#2025-02-04-latest-snapshot","title":"2025-02-04 Latest snapshot","text":""},{"location":"decision_record/#category-versioning","title":"Category: Versioning","text":""},{"location":"decision_record/#decision_1","title":"Decision","text":"<p>Postpone including \"latest snapshot\" as part of the spec for now</p> <p>In the <code>{version}</code> field of the endpoint that returns a schema content, we will allow <code>latest</code>, which will return the latest version, but not other special tags like <code>1.1.x</code>, which would return the latest within a specific constraint.</p>"},{"location":"decision_record/#rationale_1","title":"Rationale","text":"<p>Most users will just want <code>latest</code>, or a specific version. While there is some utility in a constrained version of the latest, it will add more parsing work. The latest one can just be found from the metadata on the schema which defines that as a property of the metdata. We want to keep the initial spec pretty low key, and adding additional constrained tags like this would add some complexity without a major benefit. We can revisit in the future if we want to make the spec more complex.</p>"},{"location":"decision_record/#linked-issues_1","title":"Linked issues","text":"<ul> <li>None</li> </ul>"},{"location":"decision_record/#2024-11-15-schema-metadata","title":"2024-11-15 Schema Metadata","text":""},{"location":"decision_record/#category-schema-metadata","title":"Category: Schema Metadata","text":""},{"location":"decision_record/#decision_2","title":"Decision","text":"<p>A minimal set of metadata (data about the schema itself) will be required by the API Specification, implemented as REST API query parameters.  Individual implementations may optionally add parameters.  </p> <p>The supported parameters will include but not be limited to: 1. Maturity_level 2. Semantic_version 3. Release_date 4. Release_notes 5. Status 6. Version 7. Contact 8. Namespace_name 9. Schema_name</p> <p>The API Specification provides an up-to-date list of supported parameters and indicates whether they are required or optional.</p>"},{"location":"decision_record/#rationale_2","title":"Rationale","text":"<p>Basic principle: Keep it as simple as possible.</p> <p>2025-02-18 Discussions about additional optional metadata for implementers of the Schema Registry.</p> <p>2024-11-15 Namespace-level metadata should remain minimal\u2026Jonathan suggested providing a \"contact URL\", agreed on <code>contact_URL</code>. Nathan argued for distinct roles for schema maintainers versus organizational contacts. They decided to include both concepts.</p> <p>2024-09-20 Metadata examples that we could capture - Workstream (for GA4GH SR) - status \u2013 draft, approved \u2013 maturity levels (GKS?) - source (source URL) \u2013 for schemas in original format - More information \u2013 home page for schema - Attachments -- Use DRS standards for URI.</p> <p>2024-08-20 Agreed to define a minimal set of metadata in the specification.  Individual namespace implementations MAY choose to require additional metadata (tags) as part of admitting a schema into their namespace.</p>"},{"location":"decision_record/#linked-issues_2","title":"Linked issues","text":"<ul> <li>None</li> </ul>"},{"location":"decision_record/#2024-10-18-semantic-versioning","title":"2024-10-18 Semantic Versioning","text":""},{"location":"decision_record/#category-versioning_1","title":"Category: Versioning","text":""},{"location":"decision_record/#decision_3","title":"Decision","text":"<p>Following GKS\u2019s lead on versioning in the GKS Technical Specification Maintenancedocument, the Schema Registry will adopt semantic versioning.</p>"},{"location":"decision_record/#rationale_3","title":"Rationale","text":"<p>2024-10-18 The proposed versioning scheme is based on Semantic Versioning 2, which uses a \"Major.Minor.Patch\" format commonly used in open-source software to manage version updates. The rationale behind incrementing different parts of the version number (patch for backward-compatible bug fixes, minor for backward-compatible feature additions, and major for changes that break compatibility) was outlined.</p> <p>For initial Spec and Prototype, we will not implement the Pre-release naming.  Subject to further review.</p>"},{"location":"decision_record/#linked-issues_3","title":"Linked issues","text":"<ul> <li>None</li> </ul>"},{"location":"decision_record/#2024-10-18-what-formats-shall-we-share-in-a-schema-registry","title":"2024-10-18 What formats shall we share in a Schema Registry?","text":""},{"location":"decision_record/#category-schema-format","title":"Category: Schema format","text":""},{"location":"decision_record/#decision_4","title":"Decision","text":"<p>Schema Registry returns JSON schema by default, although a schema may be originally crafted in any format.</p>"},{"location":"decision_record/#rationale_4","title":"Rationale","text":"<p>The team ultimately agreed that submitters may write their schema in any format, but that the Schema Registry (SR) MUST return JSON schema to facilitate interoperability across schemas.  Schema Registry providers may accept valid JSON schema only or opt to support other formats as long as the requirement for returning JSON schema is is met.  Additional formats may be returned SR using optional tags.  </p>"},{"location":"decision_record/#discussions","title":"Discussions","text":"<p>2024-10-18 From the perspective on how GA4GH might govern a Schema Registry, the group addressed whether JSON is the right format for schemas in a GA4GH working document. Kathy argued for sticking with JSON in the short term to avoid complicating implementation, though acknowledging that formats may evolve over time. Jonathan supported being explicit about the format, while Nathan proposed a flexible approach allowing users to request different formats (e.g., protobuf or LinkML) via a query parameter. Kathy highlighted that PhenoPackets used LinkML, which auto-generates JSON Schema, making it a potentially solved problem for PhenoPackets.  The group considered adding format as metadata for future-proofing, and debated whether multiple schema formats should be included in the registry. Nathan emphasized the importance of computability for the Schema Registry, advocating for including multiple formats to support diverse use cases. The format should be a required metadata component if we choose this approach, but the approach to handling schema distribution (either via direct API access or additional metadata endpoints) needs further discussion.</p> <p>2024-09-20 -- Andy Yates previously raised an issue about JSON Schema lacking full expressivity for schema descriptions. </p> <p>2024-08-02 \u2013 From the perspective of the spec, we can support anything, and thus don\u2019t need to require or enforce a specific format but for usability and interoperability, it\u2019s better to be in JSON schema.  For the Prototype, we will limit to JSON schema.  Subject to further review.</p> <p>Note: changes to this decision would modify the definition of Registry path.</p>"},{"location":"decision_record/#linked-issues_4","title":"Linked issues","text":"<ul> <li>GKS namespace questions</li> </ul>"},{"location":"decision_record/#2024-08-20-writeinsertupdate-functionality","title":"2024-08-20 Write/Insert/Update Functionality","text":""},{"location":"decision_record/#category-api-scope","title":"Category: API Scope","text":""},{"location":"decision_record/#decision_5","title":"Decision","text":"<p>Write/Insert/Update out-of-scope for the API</p>"},{"location":"decision_record/#rationale_5","title":"Rationale","text":"<p>The Schema Registry API is intended to facilitate finding and sharing schemas while allowing schema and repository implementers the freedom to set their own governance rules and manage user access.   While implementations need a method for inserting schemas, the specification itself should only standardize the reading and sharing aspects, not the insertion process.</p> <p>An example of the power of this decision is the fact that a single client implementation could access schemas in multiple schema collections.</p> <p>Possible back-ends for schema collections - GitHub repository - Relational database - Document store (e.g. Mongodb) - Artifact repository (e.g. Github Packages, pypi, npm) - S3-compatible object storage</p>"},{"location":"decision_record/#linked-issues_5","title":"Linked issues","text":"<ul> <li>None</li> </ul>"},{"location":"decision_record/#2024-08-09-github-style-principles","title":"2024-08-09 GitHub-style Principles","text":""},{"location":"decision_record/#category-governance","title":"Category: Governance","text":""},{"location":"decision_record/#decision_6","title":"Decision","text":"<p>The API Specification will follow a GitHub-style governance model (self-registered \"organization\" namespaces) combined with unique identifiers that include the organization ID.  </p>"},{"location":"decision_record/#rationale_6","title":"Rationale","text":"<p>Basic Principle: Keep it as simple as possible.</p> <p>Advantages of GitHub-style model: - Well known interface &amp; toolset - Can use Github authentication - Independent of vendors - Model is simple - domain/namespace/schemaName</p>"},{"location":"decision_record/#linked-issues_6","title":"Linked issues","text":"<ul> <li>None</li> </ul>"},{"location":"decision_record/#20xx-xx-xx-decision-title","title":"20xx-xx-xx {Decision title}","text":""},{"location":"decision_record/#category","title":"Category:","text":""},{"location":"decision_record/#decision_7","title":"Decision","text":"<p>{Decision text}</p>"},{"location":"decision_record/#rationale_7","title":"Rationale","text":"<p>{Rationale text}</p>"},{"location":"decision_record/#linked-issues_7","title":"Linked issues","text":"<ul> <li>{github issues}</li> </ul>"},{"location":"schema_registry_spec/","title":"Specification","text":""},{"location":"schema_registry_spec/#ga4gh-schema-registry-api-010","title":"GA4GH Schema Registry API 0.1.0","text":"<p>Allows browsing and querying for versioned JSON schema instances across namespaces.</p>"},{"location":"schema_registry_spec/#endpoints","title":"Endpoints","text":""},{"location":"schema_registry_spec/#get-namespaces","title":"GET /namespaces","text":"<p>Returns all namespaces hosted by this server</p> <p> Response 200 OK </p> <p>Refer to the common response description: NamespacesResponse.</p>"},{"location":"schema_registry_spec/#get-schemasnamespace","title":"GET /schemas/{namespace}/","text":"<p>Returns a paginated list of schema metadata within the given namespace</p> Description <p>Returns a paginated list of schemas under this namespace. The list can be filtered using query parameters matching properties of the Schema object, Such as <code>?schema_name=abcd</code> or <code>?maintainer=John+Doe</code>.</p> <p>Input parameters</p> Parameter In Type Default Nullable Description <code>latest_version</code> query string No Return only schemas with a matching `latest_version`. <code>lifecycle_stage</code> query string No Return only schemas with a matching `lifecycle_stage`. <code>maintainer</code> query string No Return only schemas with a matching `maintainer`. <code>namespace</code> path string No The namespace containing the schemas. <code>schema_name</code> query string No Return only schemas with a matching `schema_name`. <p> Response 200 OK </p> <p>Refer to the common response description: SchemasResponse.</p>"},{"location":"schema_registry_spec/#get-schemasnamespaceschema_nameversions","title":"GET /schemas/{namespace}/{schema_name}/versions","text":"<p>Returns the versions of a specific schema</p> <p>Input parameters</p> Parameter In Type Default Nullable Description <code>namespace</code> path string No The namespace of the schema. <code>schema_name</code> path string No The name of the schema. <p> Response 200 OK </p> <p>Refer to the common response description: SchemaVersionsResponse.</p>"},{"location":"schema_registry_spec/#get-schemasnamespaceschema_nameversionssemantic_version","title":"GET /schemas/{namespace}/{schema_name}/versions/{semantic_version}","text":"<p>Returns the JSON Schema document itself</p> <p>Input parameters</p> Parameter In Type Default Nullable Description <code>namespace</code> path string No The namespace of the schema. <code>schema_name</code> path string No The name of the schema. <code>semantic_version</code> path string No The semantic version. The special value `latest` is equivalent to specifying the same string as in the target schema's `latest_released_version` property.  <p> Response 200 OK </p> <p>Refer to the common response description: JSONSchemaResponse.</p>"},{"location":"schema_registry_spec/#schemas","title":"Schemas","text":""},{"location":"schema_registry_spec/#namespace","title":"Namespace","text":"Name Type <code>contact_url</code> string(uri) <code>namespace_name</code> string"},{"location":"schema_registry_spec/#schemarecord","title":"SchemaRecord","text":"Name Type <code>latest_released_version</code> string <code>maintainer</code> Array&lt;string&gt; <code>maturity_level</code> string <code>schema_name</code> string"},{"location":"schema_registry_spec/#schemaversion","title":"SchemaVersion","text":"Name Type <code>contributors</code> Array&lt;string&gt; <code>release_date</code> string(date-time) <code>release_notes</code> string <code>status</code> string <code>tags</code> <code>version</code> string"},{"location":"schema_registry_spec/#common-responses","title":"Common responses","text":"<p>This section describes common responses that are reused across operations.</p>"},{"location":"schema_registry_spec/#schemasresponse","title":"SchemasResponse","text":"<p>A list of schemas within the specified namespace.</p> <p></p> application/json <pre><code>{\n    \"namespace\": \"bioinformatics-pipeline\",\n    \"schemas\": [\n        {\n            \"schema_name\": \"sequencing-metadata\",\n            \"latest_released_version\": \"2.0.1\",\n            \"maintainer\": [\n                \"Fatima Al-Farsi\",\n                \"Miguel Santos\"\n            ],\n            \"maturity_level\": \"trial_use\"\n        },\n        {\n            \"schema_name\": \"clinical-phenotypes\",\n            \"latest_released_version\": \"1.3.0\",\n            \"maintainer\": [\n                \"Adebayo Okafor\"\n            ],\n            \"maturity_level\": \"normative\"\n        }\n    ]\n}\n</code></pre> Schema of the response body <pre><code>{\n    \"type\": \"object\",\n    \"properties\": {\n        \"namespace\": {\n            \"type\": \"string\"\n        },\n        \"schemas\": {\n            \"type\": \"array\",\n            \"items\": {\n                \"$ref\": \"#/components/schemas/SchemaRecord\"\n            }\n        }\n    }\n}\n</code></pre>"},{"location":"schema_registry_spec/#schemaversionsresponse","title":"SchemaVersionsResponse","text":"<p>Schema versions with details.</p> <p></p> application/json <pre><code>{\n    \"schema_name\": \"sequencing-metadata\",\n    \"versions\": [\n        {\n            \"version\": \"1.0.1\",\n            \"status\": \"current\",\n            \"release_date\": \"2023-11-20T00:00:00+00:00\",\n            \"contributors\": [\n                \"Fatima Al-Farsi\",\n                \"Miguel Santos\",\n                \"Adebayo Okafor\"\n            ],\n            \"release_notes\": \"Updated schema with additional metadata fields for improved annotation.\",\n            \"tags\": {\n                \"maturity_level\": \"trial_use\"\n            }\n        },\n        {\n            \"version\": \"1.0.0\",\n            \"status\": \"deprecated\",\n            \"release_date\": \"2023-06-15T00:00:00+00:00\",\n            \"contributors\": [\n                \"Miguel Santos\"\n            ],\n            \"release_notes\": \"Initial trial-use release.\",\n            \"tags\": {\n                \"maturity_level\": \"trial_use\"\n            }\n        },\n        {\n            \"version\": \"0.9.1\",\n            \"status\": \"latest\",\n            \"release_date\": \"2022-12-10T00:00:00+00:00\",\n            \"contributors\": [\n                \"Fatima Al-Farsi\"\n            ],\n            \"release_notes\": \"Experimental changes to metadata definitions.\",\n            \"tags\": {\n                \"maturity_level\": \"draft\"\n            }\n        }\n    ]\n}\n</code></pre> Schema of the response body <pre><code>{\n    \"type\": \"object\",\n    \"properties\": {\n        \"schema_name\": {\n            \"type\": \"string\"\n        },\n        \"versions\": {\n            \"type\": \"array\",\n            \"items\": {\n                \"$ref\": \"#/components/schemas/SchemaVersion\"\n            }\n        }\n    }\n}\n</code></pre>"},{"location":"schema_registry_spec/#jsonschemaresponse","title":"JSONSchemaResponse","text":"<p>The JSON Schema for the requested version.</p> <p></p> application/json <pre><code>{\n    \"$id\": \"https://example.com/schemas/genomics-analysis/versions/2.0.1\",\n    \"$schema\": \"https://json-schema.org/draft/2020-12/schema\",\n    \"title\": \"Genomics Analysis Schema\",\n    \"type\": \"object\",\n    \"properties\": {\n        \"sample_id\": {\n            \"type\": \"string\",\n            \"description\": \"Unique identifier for the biological sample.\"\n        },\n        \"sequencing_platform\": {\n            \"type\": \"string\",\n            \"description\": \"Platform used for sequencing, e.g., Illumina NovaSeq.\"\n        }\n    }\n}\n</code></pre> Schema of the response body <pre><code>{\n    \"type\": \"object\"\n}\n</code></pre>"},{"location":"schema_registry_spec/#namespacesresponse","title":"NamespacesResponse","text":"<p>A list of namespaces hosted by the server.</p> <p></p> application/json <pre><code>{\n    \"server\": \"https://example.com/schemas\",\n    \"namespaces\": [\n        {\n            \"namespace_name\": \"bioinformatics-pipeline\",\n            \"contact_url\": \"https://github.com/genomics-lab/schema-registry\"\n        },\n        {\n            \"namespace_name\": \"clinical-data-exchange\",\n            \"contact_url\": \"https://github.com/hospital-group/clinical-data\"\n        }\n    ]\n}\n</code></pre> Schema of the response body <pre><code>{\n    \"type\": \"object\",\n    \"properties\": {\n        \"server\": {\n            \"type\": \"string\"\n        },\n        \"namespaces\": {\n            \"type\": \"array\",\n            \"items\": {\n                \"$ref\": \"#/components/schemas/Namespace\"\n            }\n        }\n    }\n}\n</code></pre>"}]}